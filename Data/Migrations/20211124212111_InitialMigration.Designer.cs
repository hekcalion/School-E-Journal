// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolGradeWebApp.Data;

namespace SchoolGradeWebApp.Data.Migrations
{
    [DbContext(typeof(SchoolDataBase))]
    [Migration("20211124212111_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("SchoolGradeService.Data.Grade", b =>
                {
                    b.Property<int>("GradeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FinalGrade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FirstTermGrade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecondTermGrade")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudentID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SubjectID")
                        .HasColumnType("INTEGER");

                    b.HasKey("GradeID");

                    b.HasIndex("StudentID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolGradeService.Data.GradeDetail", b =>
                {
                    b.Property<int>("GradeDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("GradeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mark")
                        .HasColumnType("INTEGER");

                    b.HasKey("GradeDetailID");

                    b.HasIndex("GradeID");

                    b.ToTable("GradeDetails");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Group", b =>
                {
                    b.Property<int>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("GroupID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GroupID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int>("YearOfEntry")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentID");

                    b.HasIndex("GroupID");

                    b.HasIndex("LoginID")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Student_Subject", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectID")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("StudentID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Student_Subjects");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Subject", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("SubjectID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Teacher", b =>
                {
                    b.Property<int>("TeacherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("TeacherID");

                    b.HasIndex("LoginID")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SchoolGradeService.Data.TeacherWorkload", b =>
                {
                    b.Property<int>("TeacherWorkloadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherWorkloadID");

                    b.HasIndex("TeacherID");

                    b.ToTable("TeacherWorkloads");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Teacher_Subject", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherID")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("SubjectID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Teacher_Subjects");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Timetable", b =>
                {
                    b.Property<int>("TimetableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DayOfWeek")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GroupID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SubjectID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TimetableID");

                    b.HasIndex("GroupID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("SchoolGradeService.Data.User", b =>
                {
                    b.Property<string>("LoginID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("LoginID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Grade", b =>
                {
                    b.HasOne("SchoolGradeService.Data.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentID");

                    b.HasOne("SchoolGradeService.Data.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolGradeService.Data.GradeDetail", b =>
                {
                    b.HasOne("SchoolGradeService.Data.Grade", "Grade")
                        .WithMany("GradeDetails")
                        .HasForeignKey("GradeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Student", b =>
                {
                    b.HasOne("SchoolGradeService.Data.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolGradeService.Data.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SchoolGradeService.Data.Student", "LoginID");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Student_Subject", b =>
                {
                    b.HasOne("SchoolGradeService.Data.Student", "Student")
                        .WithMany("Student_Subjects")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolGradeService.Data.Subject", "Subject")
                        .WithMany("Student_Subjects")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Teacher", b =>
                {
                    b.HasOne("SchoolGradeService.Data.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("SchoolGradeService.Data.Teacher", "LoginID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolGradeService.Data.TeacherWorkload", b =>
                {
                    b.HasOne("SchoolGradeService.Data.Teacher", "Teacher")
                        .WithMany("TeacherWorkloads")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Teacher_Subject", b =>
                {
                    b.HasOne("SchoolGradeService.Data.Subject", "Subject")
                        .WithMany("Teacher_Subjects")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolGradeService.Data.Teacher", "Teacher")
                        .WithMany("Teacher_Subjects")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Timetable", b =>
                {
                    b.HasOne("SchoolGradeService.Data.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID");

                    b.HasOne("SchoolGradeService.Data.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID");

                    b.Navigation("Group");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Grade", b =>
                {
                    b.Navigation("GradeDetails");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Student_Subjects");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Subject", b =>
                {
                    b.Navigation("Student_Subjects");

                    b.Navigation("Teacher_Subjects");
                });

            modelBuilder.Entity("SchoolGradeService.Data.Teacher", b =>
                {
                    b.Navigation("Teacher_Subjects");

                    b.Navigation("TeacherWorkloads");
                });

            modelBuilder.Entity("SchoolGradeService.Data.User", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
